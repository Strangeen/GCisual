#!/bin/sh


# -----------------------------------------------------------------------------
# author：strangeen
# url: www.dinghuiye.online
# github: github.com/strangeen
# Licensed to the Apache
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# 环境要求：
# - bash
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# 参数解释：
#  -p 图形参数，图形标识[A,B,L]，列号从1开始
#     格式为：图形标识1=标题1:数据列号1:数据max列号1,图形标识2=标题2:数据列号2:数据max列号2
#     其中，max列号可为空，默认为100
#  -i 图形刷新时间间隔
#     单位毫秒，非必填，填则必须大于0
#  -s 跳过的行数
#     默认为0，非必填，填则必须大于0
#     如果设置为1，则表示跳过第1行数据，从第2行数据开始显示图形，一般用于跳过表头行
#  -t 表头行号
#     默认为1，非必填，填则必须大于0
#
#
# 例子1：对jstat日志输出实时图形
# jstat -gc pid 1000 | gcisual -s 1 -p B=Eden:6:5,B=S0:3:1,B=S1:4:2,B=Old:8:7,B=Perm:10:9,A=Eden:6:5,A=S0:3:1,A=S1:4:2
# 参数解释：
#   jstat日志可以设置输出时间间隔，因此gcisual不需要输入-i参数
#   -s输入1表示跳过日志第1行，也可以使用管道sed '1d'替代
#   jstat -gc pid 1000 | sed '1d' | gcisual -p B=Eden:6:5,B=S0:3:1,B=S1:4:2,B=Old:8:7,B=Perm:10:9
# 输出图形：
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||               | Eden: 20769.0 / 24576.0
# |                                                                                                   | S0: 0.0 / 1024.0
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||                | S1: 852.6 / 1024.0
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||                                    | Old: 56675.9 / 88576.0
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||       | Perm: 42645.4 / 46080.0
# Eden
# -----------*---------------------------------------------------------------------------------------- 20769.0 / 24576.0
# ----------**--------------**-------------**------------**-------------**-------------**-------------
# --------****------------****-----------****-----------***-----------****-----------****-----------**
# ------******----------******---------******---------*****---------******---------******----------***
# ----********--------********-------********-------*******-------********-------********--------*****
# ---*********------**********-----**********-----*********------*********------*********------*******
# -***********----************---************---***********----***********---************----*********
# ************--**************--*************-*************--*************--*************--***********
# S0
# ---------------------------------------------------------------------------------------------------- 0.0 / 1024.0
# ----------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------***************------------
# -------------------------------------------------------------------------***************------------
# -------------****************--------------------------------------------***************------------
# -------------****************---------------**************---------------***************------------
# -------------****************---------------**************---------------***************------------
# -------------****************---------------**************---------------***************------------
# S1
# ---------------------------------------------------------------------------------------------------- 852.6 / 1024.0
# ----------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------************
# ----------------------------------------------------------------------------------------************
# ----------------------------------------------------------***************---------------************
# -************----------------***************--------------***************---------------************
# -************----------------***************--------------***************---------------************
# -************----------------***************--------------***************---------------************
# 
#
# 例子2：对离线jstat日志输出图形
# jstat -gc pid 1000 100 > gcstat.log # 输出jstat日志到文件
# cat gcstat.log | gcisual -s 1 -i 1000 -p B=Eden:6:5,B=S0:3:1,B=S1:4:2,B=Old:8:7,B=Perm:10:9,A=Eden:6:5,A=S0:3:1,A=S1:4:2
# 参数解释：
#   -i参数设置图形刷新时间间隔，模拟jstat命令输入日志
# 输出图形：同例子1
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# 自定义图形文件引入方法：
# 1、graph文件夹中包含3种预置的图形，柱状图B，折线图L，面积图A
# 2、自定义图形sh文件放入/usr/local/gcisual文件夹下，文件夹下的所有sh文件都将注册为图形文件
# 3、自定义图形文件代码需要调用注册方法，以及实现接口方法，如下：
#   i、图形标识注册：
#     registGraph X
#      - X 图形标识，柱状图B，折线图L，面积图A
#   ii、图形脚本方法：
#     paintX title curr max id
#      - 打印图形方法
#      - X为图形标识
#      - 参数分别为：
#          title: 图形标题，数据类型字符串，如Eden，
#          curr: 当前数据值，数据类型正整数
#          max: 数据最大值，数据类型正整数
#          id: 图形唯一编号
#     cursorMoveNum 
#      - 获取图形高度方法（用于计算移动光标的值）
#      - 返回255以内的正整数
# -------------------------------------------------------------------------------


function error1() {
    echo "
参数解释：
 -p 图形参数，图形标识[A,B,L]，列号从1开始
    格式为：图形标识1=标题1:数据列号1:数据max列号1,图形标识2=标题2:数据列号2:数据max列号2
    其中，max列号可为空，默认为100
 -i 图形刷新时间间隔
    单位毫秒，非必填，填则必须大于0
 -s 跳过的行数
    默认为0，非必填，填则必须大于0
    如果设置为1，则表示跳过第1行数据，从第2行数据开始显示图形，一般用于跳过表头行
 -t 表头行号
    默认为1，非必填，填则必须大于0


例子1：对jstat日志输出实时图形
jstat -gc pid 1000 | gcisual -s 1 -p B=Eden:6:5,B=S0:3:1,B=S1:4:2,B=Old:8:7,B=Perm:10:9,A=Eden:6:5,A=S0:3:1,A=S1:4:2

例子2：对离线jstat日志输出图形
jstat -gc pid 1000 100 > gcstat.log # 输出jstat日志到文件
cat gcstat.log | gcisual -s 1 -i 1000 -p B=Eden:6:5,B=S0:3:1,B=S1:4:2,B=Old:8:7,B=Perm:10:9,A=Eden:6:5,A=S0:3:1,A=S1:4:2
"
    exit 1
}


function error2() {
    echo "图形标识[${graphs[@]}]中没有找到对应的图形标识：$1"
    exit 2
}


function error3() {
    echo "当前数据列不能为空：-p 图形和参数列号，格式为：图形标识1=列号1,图形标识2=列号2"
    exit 3
}


# 参数检测
if [ ! $1 ]; then
    error1
fi

# 分隔参数为数组
params=("$@")
if [ `expr ${#params[@]} % 2` -ne 0 ]; then
    error1
fi

# 检测参数项
idx=0
while [ $idx -lt ${#params[@]} ]; do
    p=${params[idx]}
    if [ $p != '-p' -a $p != '-i' -a $p != '-s' ]; then
        error1
    fi
    # 日志参数
    if [ $p = '-p' ]; then
        graphParams=${params[idx+1]}
        if [ ! $graphParams ]; then 
            error1
        else
            # 图形展示顺序
            graph=()
            # 当前数据顺序
            currDataCol=()
            # max数据顺序
            maxDataCol=()
            # 标题顺序
            titleData=()
            graphPairs=(${graphParams//,/ })
            for paramPairs in ${graphPairs[@]}; do
                pairs=(${paramPairs//=/ })
                if [ ${#pairs[@]} -ne 2 ]; then
                    error1
                else 
                    if [ ! ${pairs[1]} ]; then 
                        error1
                    fi
                    # 如果title为空时，数组下标会出错，title填充为null
                    if [ ${pairs[1]:0:1} = ':' ]; then 
                        pairs[1]=null${pairs[1]}
                    fi
                    pairs1=(${pairs[1]//:/ })
                    titleData[${#titleData[@]}]=${pairs1[0]}
                    if [ ${pairs1[1]} ]; then 
                        currDataCol[${#currDataCol[@]}]=${pairs1[1]}
                    else 
                        error3
                    fi
                    if [ ${pairs1[2]} ]; then
                        maxDataCol[${#maxDataCol[@]}]=${pairs1[2]}
                    else 
                        maxDataCol[${#maxDataCol[@]}]=-1
                    fi
                    graph[${#graph[@]}]=${pairs[0]}
                fi
            done
        fi
    fi
    # 时间间隔
    if [ $p = '-i' ]; then
        refreshInterval=${params[idx+1]}
        if [ $refreshInterval ]; then
            if [ $refreshInterval -lt 0 ]; then
                error1
            fi
        fi
    fi
    # 跳过行数
    if [ $p = '-s' ]; then
        skipLine=${params[idx+1]}
        if [ $skipLine ]; then
            if [ $skipLine -lt 0 ]; then
                error1
            fi
        fi
    fi
    let idx+=2
done


# 引入图形文件（graph文件夹下的所有sh文件）
graphs=()

# 注册图形方法
# 将图形标识注册到数组中，对应的方法都跟上标识
# 比如柱状图为B，绘制方法即为paintB，其他图形类似
function registGraph() {
    graphs[${#graphs[@]}]=$1
}

# 遍历图形文件库
if [ -e /usr/local/gcisual/ -a -d /usr/local/gcisual ]; then
    if [ `ls -l /usr/local/gcisual | grep -e "\.sh$" | wc -l` -gt 0 ]; then 
        for graphSct in `ls /usr/local/gcisual/*.sh`; do
            source $graphSct
        done
    fi
fi
for graphSct in `ls ./graph/*.sh`; do
    source $graphSct
done

# 检测参数中图形标识
for graphCfg in ${graph[@]}; do
    found='no'
    for graphSym in ${graphs[@]}; do 
        if [ $graphSym = $graphCfg ]; then
            found='yes'
            break
        fi
    done
    if [ $found = 'no' ]; then
        error2 $graphCfg
    fi
done

# 计算移动光标数，打印图形之后才需要移动
for pGraph in ${graph[@]} ; do
    cursorMoveNum$pGraph
    cursorMove=`expr $cursorMove + $?`
done


# 刷新时间计算（输入为毫秒）
if [ $refreshInterval ]; then
    # 转换为秒
    refreshIntervalBySec=`echo "scale=3; $refreshInterval / 1000" | bc`
fi

# 绘制注册的图形
currLine=0
while read input; do
    let currLine++
    if [ $skipLine ]; then 
        if [ $currLine -le $skipLine ]; then 
            continue
        fi
    fi
    if [ $printed ]; then 
        if [ $printed = 'yes' ]; then
            printf '\033['$cursorMove'A'
        fi
    fi
    printed='yes'
    # 调用对应图形的paint方法
    for pIdx in ${!graph[@]} ; do
        title=${titleData[$pIdx]}
        currData=`echo $input | awk '{print $'${currDataCol[$pIdx]}'}'`
        if [ ${maxDataCol[$pIdx]} -gt -1 ]; then 
            maxData=`echo $input | awk '{print $'${maxDataCol[$pIdx]}'}'`
        else 
            maxData=100
        fi
        paint${graph[pIdx]} $title $currData $maxData $pIdx
    done
    if [ $refreshIntervalBySec ]; then
        sleep $refreshIntervalBySec
    fi
done

